//####################COMMON CFLAGS######################
common_cflags = [
    "-O3",
    "-std=c++11",
    "-DANDROID",
    "-D__ANDROID__",
    "-D_FORTIFY_SOURCE=2",
    "-DNDEBUG",
    "-Wall",
    "-Wformat",
    "-Wformat-security",
    "-Wuninitialized",
    "-Wno-undef",
    "-Wno-unused-function",
    "-Winit-self",
    "-Wmaybe-uninitialized",
    "-Wreturn-type",
    "-Wno-unused-variable",
    "-Wno-unused-parameter",
    "-Wno-error=redundant-move",
    "-Wno-unknown-pragmas",
    "-Wno-profile-instr-missing",
    "-Wno-sign-conversion",
    "-Wno-reorder-ctor",
    "-Wno-deprecated-declarations",
    "-Wno-non-virtual-dtor",
    "-Wno-overloaded-virtual",
    "-Wno-strict-overflow",
    "-fPIC",
    "-fexceptions",
    "-frtti",
    "-ffunction-sections",
    "-fdata-sections",
    "-fdiagnostics-show-option",
    "-ffunction-sections",
    "-fstack-protector-all",
    "-fsigned-char",
]

//#################################################

cc_library_headers {
    name: "plugin_api_headers",
    vendor: true,
    export_include_dirs: [
        "inference-engine/src/plugin_api",
        "inference-engine/src/plugin_api/cpp_interfaces",
        "inference-engine/src/plugin_api/threading",
    ],
}

//#################################################

cc_library_headers {
    name: "libinference_headers",
    vendor: true,
    export_include_dirs: [
        "inference-engine/src/plugin_api",
        "inference-engine/src/preprocessing",
        "inference-engine/src/inference_engine",
        "inference-engine/include",
        "openvino/itt/include",
        "openvino/pp/include",
        "inference-engine/src/legacy_api/include",
        "inference-engine/thirdparty/pugixml/src",
        "ngraph/core/include",
        "inference-engine/src/transformations/include",
        "inference-engine/src/readers/reader_api",
        "inference-engine/src/readers/ir_reader",
        "inference-engine/include/cpp",
        "inference-engine/include/details",
    ]
}

//#################################################

cc_library_shared {

    name: "libinference_engine",
    proprietary: true,
    owner: "intel",
    compile_multilib: "64",

    srcs: [
        "inference-engine/src/inference_engine/blob_factory.cpp",
        "inference-engine/src/inference_engine/blob_transform.cpp",
        "inference-engine/src/inference_engine/cnn_network_ngraph_impl.cpp",
        "inference-engine/src/inference_engine/compilation_context.cpp",
        "inference-engine/src/inference_engine/cpp/ie_cnn_network.cpp",
        "inference-engine/src/inference_engine/cpp/ie_executable_network.cpp",
        "inference-engine/src/inference_engine/cpp/ie_infer_request.cpp",
        "inference-engine/src/inference_engine/cpp/ie_variable_state.cpp",
        "inference-engine/src/inference_engine/cpp_interfaces/interface/ie_iexecutable_network_internal.cpp",
        "inference-engine/src/inference_engine/cpp_interfaces/interface/ie_iinfer_request_internal.cpp",
        "inference-engine/src/inference_engine/cpp_interfaces/interface/ie_iplugin_internal.cpp",
        "inference-engine/src/inference_engine/cpp_interfaces/interface/ie_ivariable_state_internal.cpp",
        "inference-engine/src/inference_engine/ie_blob_common.cpp",
        "inference-engine/src/inference_engine/ie_cache_guard.cpp",
        "inference-engine/src/inference_engine/ie_common.cpp",
        "inference-engine/src/inference_engine/ie_compound_blob.cpp",
        "inference-engine/src/inference_engine/ie_core.cpp",
        "inference-engine/src/inference_engine/ie_data.cpp",
        "inference-engine/src/inference_engine/ie_layouts.cpp",
        "inference-engine/src/inference_engine/ie_memcpy.cpp",
        "inference-engine/src/inference_engine/ie_network_reader.cpp",
        "inference-engine/src/inference_engine/ie_ngraph_utils.cpp",
        "inference-engine/src/inference_engine/ie_parameter.cpp",
        "inference-engine/src/inference_engine/ie_system_conf.cpp",
        "inference-engine/src/inference_engine/ie_transformations.cpp",
        "inference-engine/src/inference_engine/ie_version.cpp",
        "inference-engine/src/inference_engine/os/lin/lin_shared_object_loader.cpp",
        "inference-engine/src/inference_engine/os/lin/lin_system_conf.cpp",
        "inference-engine/src/inference_engine/precision_utils.cpp",
        "inference-engine/src/inference_engine/system_allocator.cpp",
        "inference-engine/src/inference_engine/threading/ie_cpu_streams_executor.cpp",
        "inference-engine/src/inference_engine/threading/ie_executor_manager.cpp",
        "inference-engine/src/inference_engine/threading/ie_istreams_executor.cpp",
        "inference-engine/src/inference_engine/threading/ie_itask_executor.cpp",
        "inference-engine/src/inference_engine/threading/ie_parallel_custom_arena.cpp",
        "inference-engine/src/inference_engine/threading/ie_thread_affinity.cpp",
        "inference-engine/src/inference_engine/xml_parse_utils.cpp",
        "inference-engine/src/inference_engine/cpu_x86_sse42/blob_transform_sse42.cpp",
        "inference-engine/src/inference_engine/file_utils.cpp",
        "inference-engine/src/legacy_api/src/transformations/convert_opset1_to_legacy/convert_one_hot_to_one_hot_ie.cpp",
        "inference-engine/src/legacy_api/src/transformations/convert_opset1_to_legacy/convert_nms_5_to_legacy.cpp",
        "inference-engine/src/legacy_api/src/ngraph_ops/nms_ie.cpp",
        "inference-engine/src/legacy_api/src/ngraph_ops/onehot_ie.cpp",
        "inference-engine/src/inference_engine/ie_rtti.cpp",
    ],

    header_libs: [
        "libinference_headers",
        "libdnnl_headers",
        "libtbb_headers",
    ],

    cflags: common_cflags + [
        "-DENABLE_MKL_DNN=1",
        "-DHAVE_SSE=1",
        "-DIE_BUILD_POSTFIX=\"\"",
        "-DIE_THREAD=IE_THREAD_TBB",
        "-DIMPLEMENT_INFERENCE_ENGINE_API",
        "-Dinference_engine_EXPORTS",
        "-DUSE_STATIC_IE",
        "-Dmsse4.2",
        "-DCI_BUILD_NUMBER=\"custom_releases/2021/4_b76c90374501ac461d89a8fba44335741d066ccc\"",
    ],

    shared_libs: [
        "liblog",
        "libtbb",
        "libtbbmalloc",
        "libinference_engine_transformations",
        "libngraph"
    ],

    static_libs: [
        "libpugixml",
        "libitt"
    ],

    rtti: true,

    strip: {
        none: true,
    }

}

//#################################################

cc_library_headers {
    name: "libinference_engine_transformations_headers",
    vendor: true,
    export_include_dirs: [
        "inference-engine/src/transformations/include",
        "inference-engine/src/transformations/src",
        "ngraph/core/include",
        "ngraph/core/reference/include",
        "openvino/itt/include",
        "openvino/pp/include",
        "ngraph/core/builder/include",
        "inference-engine/thirdparty/pugixml/src",
        "openvino/conditional_compilation/include"
    ]
}

//#################################################

cc_library_shared {

    name: "libinference_engine_transformations",
    proprietary: true,
    owner: "intel",
    compile_multilib: "64",

    srcs: [
        "inference-engine/src/transformations/src/ngraph_ops/convolution_ie.cpp",
        "inference-engine/src/transformations/src/ngraph_ops/deconvolution_ie.cpp",
        "inference-engine/src/transformations/src/ngraph_ops/framework_node.cpp",
        "inference-engine/src/transformations/src/ngraph_ops/nms_ie_internal.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/add_fake_quantize_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/algebraic_simplification.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/batch_to_space_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/binarize_weights.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/broadcast_elementwise_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/clamp_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/common_optimizations.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/conv_bias_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/conv_mul_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/conv_to_binary_conv.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/convert_quantize_dequantize.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/depth_to_space_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/dilated_convolution_converter.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/eliminate_unsqueeze_gather.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/fq_mul_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/fq_reshape_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/gelu_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/hsigmoid_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/hswish_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/lin_op_sequence_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/mish_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/mul_fake_quantize_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/mvn_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/nop_elimination.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/normalize_l2_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/optimize_strided_slice.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/pad_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/pull_transpose_through_fq.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/relu_fake_quantize_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/remove_filtering_boxes_by_size.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/shuffle_channels_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/softmax_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/softplus_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/softplus_to_mish_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/space_to_batch_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/split_squeeze_concat_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/swish_fusion.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/transpose_sinking.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/transpose_to_reshape.cpp",
        "inference-engine/src/transformations/src/transformations/common_optimizations/weights_dequantize_to_fake_quantize.cpp",
        "inference-engine/src/transformations/src/transformations/control_flow/unroll_tensor_iterator.cpp",
        "inference-engine/src/transformations/src/transformations/init_node_info.cpp",
        "inference-engine/src/transformations/src/transformations/low_precision/disable_convert_constant_folding_on_const_path.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/batch_norm_decomposition.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/bidirectional_sequences_decomposition.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_batch_to_space.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_broadcast3.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_broadcast_to_tiles.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_convolutions.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_depth_to_space.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_divide.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_gather_0d.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_gather_v1_to_gather_v7.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_gather_v7_to_gather_v1.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_gelu.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_interpolate1_to_interpolate4.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_minimum_to_power_and_max.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_mod.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_mvn1_to_mvn6.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_negative.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_nms_to_nms_ie_internal.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_pad_to_group_conv.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_previous_nms_to_nms_5.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_reduce_to_pooling.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_scatter_elements_to_scatter.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_sequences_to_tensor_iterator.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_shapeof3.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_shuffle_channels3.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_space_to_batch.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_space_to_depth.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_subtract.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_ti_to_sequences.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/convert_topk3.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/einsum_decomposition.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/fq_decomposition.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/gather_normalize_negative_indices.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/gelu7_downgrade.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/gru_cell_decomposition.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/hsigmoid_decomposition.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/hswish_decomposition.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/log_softmax_decomposition.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/lstm_cell_decomposition.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/mvn6_decomposition.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/reduce_l1_decomposition.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/reduce_l2_decomposition.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/rnn_cell_decomposition.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/simplify_ctc_greedy_decoder_seq_len.cpp",
        "inference-engine/src/transformations/src/transformations/op_conversions/softplus_decomposition.cpp",
        "inference-engine/src/transformations/src/transformations/opset_conversions/convert_opset2_to_opset1.cpp",
        "inference-engine/src/transformations/src/transformations/opset_conversions/convert_opset3_to_opset2.cpp",
        "inference-engine/src/transformations/src/transformations/rt_info/dequantization_attribute.cpp",
        "inference-engine/src/transformations/src/transformations/rt_info/fused_names_attribute.cpp",
        "inference-engine/src/transformations/src/transformations/rt_info/primitives_priority_attribute.cpp",
        "inference-engine/src/transformations/src/transformations/serialize.cpp",
        "inference-engine/src/transformations/src/transformations/smart_reshape/matmul_sr.cpp",
        "inference-engine/src/transformations/src/transformations/smart_reshape/mimic_set_batch_size.cpp",
        "inference-engine/src/transformations/src/transformations/smart_reshape/proposal_scales_stridedslice.cpp",
        "inference-engine/src/transformations/src/transformations/smart_reshape/reshape_to_1D.cpp",
        "inference-engine/src/transformations/src/transformations/smart_reshape/set_batch_size.cpp",
        "inference-engine/src/transformations/src/transformations/smart_reshape/smart_reshape.cpp",
        "inference-engine/src/transformations/src/transformations/smart_reshape/strided_slice_squeeze.cpp",
        "inference-engine/src/transformations/src/transformations/utils/utils.cpp",
    ],

    header_libs: [
        "libinference_engine_transformations_headers"
    ],

    cflags: common_cflags + [
        "-DENABLE_MKL_DNN=1",
        "-DIE_BUILD_POSTFIX=\"\"",
        "-Dinference_engine_transformations_EXPORTS"
    ],

    shared_libs: [
        "liblog",
        "libngraph"
    ],

    static_libs: [
        "libngraph_reference",
        "libngraph_builders",
        "libpugixml",
        "libitt"
    ],

    rtti: true,

    strip: {
        none: true,
    }
}

//#################################################

cc_library_headers {
    name: "libinference_engine_lp_transformations_headers",
    vendor: true,
    export_include_dirs: [
        "inference-engine/src/low_precision_transformations/include",
        "inference-engine/src/transformations/include",
        "ngraph/core/include",
        "openvino/itt/include",
        "openvino/pp/include",
    ],
}

//#################################################

cc_library_shared {

    name: "libinference_engine_lp_transformations",
    proprietary: true,
    owner: "intel",
    compile_multilib: "64",

    srcs: [
        "inference-engine/src/low_precision_transformations/src/add.cpp",
        "inference-engine/src/low_precision_transformations/src/avg_pool.cpp",
        "inference-engine/src/low_precision_transformations/src/clamp.cpp",
        "inference-engine/src/low_precision_transformations/src/concat.cpp",
        "inference-engine/src/low_precision_transformations/src/concat_multi_channels.cpp",
        "inference-engine/src/low_precision_transformations/src/convert.cpp",
        "inference-engine/src/low_precision_transformations/src/convert_subtract_constant.cpp",
        "inference-engine/src/low_precision_transformations/src/convolution.cpp",
        "inference-engine/src/low_precision_transformations/src/convolution_backprop_data.cpp",
        "inference-engine/src/low_precision_transformations/src/depth_to_space.cpp",
        "inference-engine/src/low_precision_transformations/src/eltwise_base_transformation.cpp",
        "inference-engine/src/low_precision_transformations/src/fake_quantize.cpp",
        "inference-engine/src/low_precision_transformations/src/fake_quantize_decomposition.cpp",
        "inference-engine/src/low_precision_transformations/src/fake_quantize_dequantization.cpp",
        "inference-engine/src/low_precision_transformations/src/fold_convert.cpp",
        "inference-engine/src/low_precision_transformations/src/fuse_convert.cpp",
        "inference-engine/src/low_precision_transformations/src/fuse_fake_quantize.cpp",
        "inference-engine/src/low_precision_transformations/src/fuse_multiply_to_fake_quantize.cpp",
        "inference-engine/src/low_precision_transformations/src/fuse_subtract_to_fake_quantize.cpp",
        "inference-engine/src/low_precision_transformations/src/group_convolution.cpp",
        "inference-engine/src/low_precision_transformations/src/interpolate.cpp",
        "inference-engine/src/low_precision_transformations/src/layer_transformation.cpp",
        "inference-engine/src/low_precision_transformations/src/mat_mul.cpp",
        "inference-engine/src/low_precision_transformations/src/max_pool.cpp",
        "inference-engine/src/low_precision_transformations/src/multiply.cpp",
        "inference-engine/src/low_precision_transformations/src/multiply_to_group_convolution.cpp",
        "inference-engine/src/low_precision_transformations/src/mvn.cpp",
        "inference-engine/src/low_precision_transformations/src/network_helper.cpp",
        "inference-engine/src/low_precision_transformations/src/normalize_l2.cpp",
        "inference-engine/src/low_precision_transformations/src/prelu.cpp",
        "inference-engine/src/low_precision_transformations/src/pull_reshape_through_dequantization.cpp",
        "inference-engine/src/low_precision_transformations/src/pull_transpose_through_dequantization.cpp",
        "inference-engine/src/low_precision_transformations/src/quantization_details.cpp",
        "inference-engine/src/low_precision_transformations/src/reduce_base_transformation.cpp",
        "inference-engine/src/low_precision_transformations/src/reduce_max.cpp",
        "inference-engine/src/low_precision_transformations/src/reduce_mean.cpp",
        "inference-engine/src/low_precision_transformations/src/reduce_min.cpp",
        "inference-engine/src/low_precision_transformations/src/reduce_sum.cpp",
        "inference-engine/src/low_precision_transformations/src/relu.cpp",
        "inference-engine/src/low_precision_transformations/src/reshape.cpp",
        "inference-engine/src/low_precision_transformations/src/shuffle_channels.cpp",
        "inference-engine/src/low_precision_transformations/src/split.cpp",
        "inference-engine/src/low_precision_transformations/src/squeeze.cpp",
        "inference-engine/src/low_precision_transformations/src/strided_slice.cpp",
        "inference-engine/src/low_precision_transformations/src/subgraph.cpp",
        "inference-engine/src/low_precision_transformations/src/subtract.cpp",
        "inference-engine/src/low_precision_transformations/src/subtract_multiply_to_multiply_add.cpp",
        "inference-engine/src/low_precision_transformations/src/transformation_context.cpp",
        "inference-engine/src/low_precision_transformations/src/transformer.cpp",
        "inference-engine/src/low_precision_transformations/src/transparent_base_transformation.cpp",
        "inference-engine/src/low_precision_transformations/src/transpose.cpp",
        "inference-engine/src/low_precision_transformations/src/unsqueeze.cpp",
        "inference-engine/src/low_precision_transformations/src/variadic_split.cpp",
        "inference-engine/src/low_precision_transformations/src/weightable_layer_transformation.cpp"
    ],

    header_libs: [
        "libinference_engine_lp_transformations_headers"
    ],

    cflags: common_cflags + [
        "-DENABLE_MKL_DNN=1",
        "-DIE_BUILD_POSTFIX=\"\"",
        "-Dinference_engine_lp_transformations_EXPORTS",
        "-Dinference_engine_transformations_EXPORTS"
    ],

    shared_libs: [
        "liblog",
        "libinference_engine_transformations",
        "libngraph"
    ],

    static_libs: [
        "libitt"
    ],

    rtti: true,

    strip: {
        none: true,
    }
}

//#################################################

cc_library_headers {
    name: "libngraph_headers",
    vendor: true,
    export_include_dirs: [
        "ngraph/core/include",
        "ngraph/core/src",
        "ngraph/core/builder/include",
        "ngraph/core/reference/include",
        "openvino/conditional_compilation/include",
        "openvino/itt/include",
        "openvino/pp/include",
        "inference-engine/src/transformations/include"
    ],
}

//#################################################

cc_library_shared {

    name: "libngraph",
    proprietary: true,
    owner: "intel",
    compile_multilib: "64",

    srcs: [
        "ngraph/core/src/attribute_adapter.cpp",
        "ngraph/core/src/attribute_visitor.cpp",
        "ngraph/core/src/axis_set.cpp",
        "ngraph/core/src/axis_vector.cpp",
        "ngraph/core/src/check.cpp",
        "ngraph/core/src/coordinate.cpp",
        "ngraph/core/src/coordinate_diff.cpp",
        "ngraph/core/src/descriptor/input.cpp",
        "ngraph/core/src/descriptor/output.cpp",
        "ngraph/core/src/descriptor/tensor.cpp",
        "ngraph/core/src/dimension.cpp",
        "ngraph/core/src/distributed.cpp",
        "ngraph/core/src/env_util.cpp",
        "ngraph/core/src/factory.cpp",
        "ngraph/core/src/file_util.cpp",
        "ngraph/core/src/function.cpp",
        "ngraph/core/src/graph_util.cpp",
        "ngraph/core/src/interval.cpp",
        "ngraph/core/src/log.cpp",
        "ngraph/core/src/ngraph.cpp",
        "ngraph/core/src/node.cpp",
        "ngraph/core/src/node_input.cpp",
        "ngraph/core/src/node_output.cpp",
        "ngraph/core/src/op/abs.cpp",
        "ngraph/core/src/op/acos.cpp",
        "ngraph/core/src/op/acosh.cpp",
        "ngraph/core/src/op/add.cpp",
        "ngraph/core/src/op/and.cpp",
        "ngraph/core/src/op/asin.cpp",
        "ngraph/core/src/op/asinh.cpp",
        "ngraph/core/src/op/assign.cpp",
        "ngraph/core/src/op/atan.cpp",
        "ngraph/core/src/op/atanh.cpp",
        "ngraph/core/src/op/avg_pool.cpp",
        "ngraph/core/src/op/batch_norm.cpp",
        "ngraph/core/src/op/batch_to_space.cpp",
        "ngraph/core/src/op/binary_convolution.cpp",
        "ngraph/core/src/op/broadcast.cpp",
        "ngraph/core/src/op/bucketize.cpp",
        "ngraph/core/src/op/ceiling.cpp",
        "ngraph/core/src/op/clamp.cpp",
        "ngraph/core/src/op/concat.cpp",
        "ngraph/core/src/op/constant.cpp",
        "ngraph/core/src/op/convert.cpp",
        "ngraph/core/src/op/convert_like.cpp",
        "ngraph/core/src/op/convolution.cpp",
        "ngraph/core/src/op/cos.cpp",
        "ngraph/core/src/op/cosh.cpp",
        "ngraph/core/src/op/ctc_greedy_decoder.cpp",
        "ngraph/core/src/op/ctc_greedy_decoder_seq_len.cpp",
        "ngraph/core/src/op/ctc_loss.cpp",
        "ngraph/core/src/op/cum_sum.cpp",
        "ngraph/core/src/op/deformable_convolution.cpp",
        "ngraph/core/src/op/deformable_psroi_pooling.cpp",
        "ngraph/core/src/op/depth_to_space.cpp",
        "ngraph/core/src/op/detection_output.cpp",
        "ngraph/core/src/op/dft.cpp",
        "ngraph/core/src/op/divide.cpp",
        "ngraph/core/src/op/einsum.cpp",
        "ngraph/core/src/op/elu.cpp",
        "ngraph/core/src/op/embedding_segments_sum.cpp",
        "ngraph/core/src/op/embeddingbag_offsets_sum.cpp",
        "ngraph/core/src/op/embeddingbag_packedsum.cpp",
        "ngraph/core/src/op/equal.cpp",
        "ngraph/core/src/op/erf.cpp",
        "ngraph/core/src/op/exp.cpp",
        "ngraph/core/src/op/experimental_detectron_detection_output.cpp",
        "ngraph/core/src/op/experimental_detectron_generate_proposals.cpp",
        "ngraph/core/src/op/experimental_detectron_prior_grid_generator.cpp",
        "ngraph/core/src/op/experimental_detectron_roi_feature.cpp",
        "ngraph/core/src/op/experimental_detectron_topkrois.cpp",
        "ngraph/core/src/op/extractimagepatches.cpp",
        "ngraph/core/src/op/fake_quantize.cpp",
        "ngraph/core/src/op/floor.cpp",
        "ngraph/core/src/op/floor_mod.cpp",
        "ngraph/core/src/op/gather.cpp",
        "ngraph/core/src/op/gather_elements.cpp",
        "ngraph/core/src/op/gather_nd.cpp",
        "ngraph/core/src/op/gather_tree.cpp",
        "ngraph/core/src/op/gelu.cpp",
        "ngraph/core/src/op/greater.cpp",
        "ngraph/core/src/op/greater_eq.cpp",
        "ngraph/core/src/op/grn.cpp",
        "ngraph/core/src/op/group_conv.cpp",
        "ngraph/core/src/op/gru_cell.cpp",
        "ngraph/core/src/op/gru_sequence.cpp",
        "ngraph/core/src/op/hard_sigmoid.cpp",
        "ngraph/core/src/op/hsigmoid.cpp",
        "ngraph/core/src/op/hswish.cpp",
        "ngraph/core/src/op/idft.cpp",
        "ngraph/core/src/op/interpolate.cpp",
        "ngraph/core/src/op/less.cpp",
        "ngraph/core/src/op/less_eq.cpp",
        "ngraph/core/src/op/log.cpp",
        "ngraph/core/src/op/log_softmax.cpp",
        "ngraph/core/src/op/loop.cpp",
        "ngraph/core/src/op/lrn.cpp",
        "ngraph/core/src/op/lstm_cell.cpp",
        "ngraph/core/src/op/lstm_sequence.cpp",
        "ngraph/core/src/op/matmul.cpp",
        "ngraph/core/src/op/max.cpp",
        "ngraph/core/src/op/max_pool.cpp",
        "ngraph/core/src/op/maximum.cpp",
        "ngraph/core/src/op/min.cpp",
        "ngraph/core/src/op/minimum.cpp",
        "ngraph/core/src/op/mish.cpp",
        "ngraph/core/src/op/mod.cpp",
        "ngraph/core/src/op/multiply.cpp",
        "ngraph/core/src/op/mvn.cpp",
        "ngraph/core/src/op/negative.cpp",
        "ngraph/core/src/op/non_max_suppression.cpp",
        "ngraph/core/src/op/non_zero.cpp",
        "ngraph/core/src/op/normalize_l2.cpp",
        "ngraph/core/src/op/not.cpp",
        "ngraph/core/src/op/not_equal.cpp",
        "ngraph/core/src/op/one_hot.cpp",
        "ngraph/core/src/op/op.cpp",
        "ngraph/core/src/op/or.cpp",
        "ngraph/core/src/op/pad.cpp",
        "ngraph/core/src/op/parameter.cpp",
        "ngraph/core/src/op/power.cpp",
        "ngraph/core/src/op/prelu.cpp",
        "ngraph/core/src/op/prior_box.cpp",
        "ngraph/core/src/op/prior_box_clustered.cpp",
        "ngraph/core/src/op/proposal.cpp",
        "ngraph/core/src/op/psroi_pooling.cpp",
        "ngraph/core/src/op/range.cpp",
        "ngraph/core/src/op/read_value.cpp",
        "ngraph/core/src/op/reduce_l1.cpp",
        "ngraph/core/src/op/reduce_l2.cpp",
        "ngraph/core/src/op/reduce_logical_and.cpp",
        "ngraph/core/src/op/reduce_logical_or.cpp",
        "ngraph/core/src/op/reduce_mean.cpp",
        "ngraph/core/src/op/reduce_prod.cpp",
        "ngraph/core/src/op/reduce_sum.cpp",
        "ngraph/core/src/op/region_yolo.cpp",
        "ngraph/core/src/op/relu.cpp",
        "ngraph/core/src/op/reorg_yolo.cpp",
        "ngraph/core/src/op/reshape.cpp",
        "ngraph/core/src/op/result.cpp",
        "ngraph/core/src/op/reverse.cpp",
        "ngraph/core/src/op/reverse_sequence.cpp",
        "ngraph/core/src/op/rnn_cell.cpp",
        "ngraph/core/src/op/rnn_sequence.cpp",
        "ngraph/core/src/op/roi_align.cpp",
        "ngraph/core/src/op/roi_pooling.cpp",
        "ngraph/core/src/op/roll.cpp",
        "ngraph/core/src/op/round.cpp",
        "ngraph/core/src/op/scatter_elements_update.cpp",
        "ngraph/core/src/op/scatter_nd_update.cpp",
        "ngraph/core/src/op/scatter_update.cpp",
        "ngraph/core/src/op/select.cpp",
        "ngraph/core/src/op/selu.cpp",
        "ngraph/core/src/op/shape_of.cpp",
        "ngraph/core/src/op/shuffle_channels.cpp",
        "ngraph/core/src/op/sigmoid.cpp",
        "ngraph/core/src/op/sign.cpp",
        "ngraph/core/src/op/sin.cpp",
        "ngraph/core/src/op/sinh.cpp",
        "ngraph/core/src/op/sink.cpp",
        "ngraph/core/src/op/softmax.cpp",
        "ngraph/core/src/op/softplus.cpp",
        "ngraph/core/src/op/space_to_batch.cpp",
        "ngraph/core/src/op/space_to_depth.cpp",
        "ngraph/core/src/op/split.cpp",
        "ngraph/core/src/op/sqrt.cpp",
        "ngraph/core/src/op/squared_difference.cpp",
        "ngraph/core/src/op/squeeze.cpp",
        "ngraph/core/src/op/strided_slice.cpp",
        "ngraph/core/src/op/subtract.cpp",
        "ngraph/core/src/op/swish.cpp",
        "ngraph/core/src/op/tan.cpp",
        "ngraph/core/src/op/tanh.cpp",
        "ngraph/core/src/op/tensor_iterator.cpp",
        "ngraph/core/src/op/tile.cpp",
        "ngraph/core/src/op/topk.cpp",
        "ngraph/core/src/op/transpose.cpp",
        "ngraph/core/src/op/type_relaxed.cpp",
        "ngraph/core/src/op/unsqueeze.cpp",
        "ngraph/core/src/op/util/activation_functions.cpp",
        "ngraph/core/src/op/util/arithmetic_reduction.cpp",
        "ngraph/core/src/op/util/arithmetic_reductions_keep_dims.cpp",
        "ngraph/core/src/op/util/attr_types.cpp",
        "ngraph/core/src/op/util/binary_elementwise_arithmetic.cpp",
        "ngraph/core/src/op/util/binary_elementwise_comparison.cpp",
        "ngraph/core/src/op/util/binary_elementwise_logical.cpp",
        "ngraph/core/src/op/util/broadcast_base.cpp",
        "ngraph/core/src/op/util/elementwise_args.cpp",
        "ngraph/core/src/op/util/embeddingbag_offsets_base.cpp",
        "ngraph/core/src/op/util/embeddingbag_packed_base.cpp",
        "ngraph/core/src/op/util/evaluation_context.cpp",
        "ngraph/core/src/op/util/fft_base.cpp",
        "ngraph/core/src/op/util/fused_op.cpp",
        "ngraph/core/src/op/util/gather_base.cpp",
        "ngraph/core/src/op/util/index_reduction.cpp",
        "ngraph/core/src/op/util/logical_reduction.cpp",
        "ngraph/core/src/op/util/logical_reduction_keep_dims.cpp",
        "ngraph/core/src/op/util/op_types.cpp",
        "ngraph/core/src/op/util/recurrent_sequence.cpp",
        "ngraph/core/src/op/util/rnn_cell_base.cpp",
        "ngraph/core/src/op/util/scatter_base.cpp",
        "ngraph/core/src/op/util/scatter_nd_base.cpp",
        "ngraph/core/src/op/util/sub_graph_base.cpp",
        "ngraph/core/src/op/util/unary_elementwise_arithmetic.cpp",
        "ngraph/core/src/op/util/variable.cpp",
        "ngraph/core/src/op/variadic_split.cpp",
        "ngraph/core/src/op/xor.cpp",
        "ngraph/core/src/opsets/opset.cpp",
        "ngraph/core/src/partial_shape.cpp",
        "ngraph/core/src/pass/constant_folding.cpp",
        "ngraph/core/src/pass/convert_fp32_to_fp16.cpp",
        "ngraph/core/src/pass/convert_precision.cpp",
        "ngraph/core/src/pass/graph_rewrite.cpp",
        "ngraph/core/src/pass/low_latency.cpp",
        "ngraph/core/src/pass/manager.cpp",
        "ngraph/core/src/pass/pass.cpp",
        "ngraph/core/src/pass/pass_config.cpp",
        "ngraph/core/src/pass/perf_counters.cpp",
        "ngraph/core/src/pass/validate.cpp",
        "ngraph/core/src/pass/visualize_tree.cpp",
        "ngraph/core/src/pattern/matcher.cpp",
        "ngraph/core/src/pattern/op/any.cpp",
        "ngraph/core/src/pattern/op/any_of.cpp",
        "ngraph/core/src/pattern/op/any_output.cpp",
        "ngraph/core/src/pattern/op/branch.cpp",
        "ngraph/core/src/pattern/op/capture.cpp",
        "ngraph/core/src/pattern/op/label.cpp",
        "ngraph/core/src/pattern/op/or.cpp",
        "ngraph/core/src/pattern/op/pattern.cpp",
        "ngraph/core/src/pattern/op/skip.cpp",
        "ngraph/core/src/pattern/op/true.cpp",
        "ngraph/core/src/pattern/op/wrap_type.cpp",
        "ngraph/core/src/provenance.cpp",
        "ngraph/core/src/rt_info.cpp",
        "ngraph/core/src/runtime/aligned_buffer.cpp",
        "ngraph/core/src/runtime/host_tensor.cpp",
        "ngraph/core/src/runtime/tensor.cpp",
        "ngraph/core/src/shape.cpp",
        "ngraph/core/src/shape_util.cpp",
        "ngraph/core/src/slice_plan.cpp",
        "ngraph/core/src/specialize_function.cpp",
        "ngraph/core/src/strides.cpp",
        "ngraph/core/src/type.cpp",
        "ngraph/core/src/type/bfloat16.cpp",
        "ngraph/core/src/type/element_type.cpp",
        "ngraph/core/src/type/float16.cpp",
        "ngraph/core/src/util.cpp",
        "ngraph/core/src/validation_util.cpp",
        "ngraph/core/src/variant.cpp"
    ],

    header_libs: [
        "libngraph_headers"
    ],

    cflags: common_cflags + [
        "-DIE_BUILD_POSTFIX=\"\"",
        "-DIN_NGRAPH_LIBRARY",
        "-DPROJECT_ROOT_DIR=\"ngraph\"",
        "-Dngraph_EXPORTS"
    ],

    shared_libs: [
        "liblog"
    ],

    static_libs: [
        "libngraph_reference",
        "libngraph_builders",
        "libitt"
    ],

    rtti: true,

    strip: {
        none: true,
    }
}

//#################################################

cc_library_static {
    name: "libngraph_builders",
    proprietary: true,
    compile_multilib: "64",

    srcs: [
        "ngraph/core/builder/src/builder/autobroadcast.cpp",
        "ngraph/core/builder/src/builder/make_constant.cpp",
        "ngraph/core/builder/src/builder/norm.cpp",
        "ngraph/core/builder/src/builder/reduce_ops.cpp",
        "ngraph/core/builder/src/builder/reshape.cpp",
        "ngraph/core/builder/src/builder/split.cpp",
    ],

    local_include_dirs: [
        "ngraph/core/builder/include",
        "ngraph/core/include"
    ],

    cflags: common_cflags + [
        "-DNGRAPH_DYNAMIC_COMPONENTS_ENABLE",
        "-DIE_BUILD_POSTFIX=\"\"",
        "-DPROJECT_ROOT_DIR=\"ngraph\""
    ],

    rtti: true,

    strip: {
        none: true,
    }
}

//#################################################

cc_library_static {
    name: "libngraph_reference",
    proprietary: true,
    compile_multilib: "64",

    srcs: [
        "ngraph/core/reference/src/coordinate_index.cpp",
        "ngraph/core/reference/src/coordinate_range.cpp",
        "ngraph/core/reference/src/coordinate_transform.cpp",
        "ngraph/core/reference/src/runtime/opt_kernel/reshape.cpp",
        "ngraph/core/reference/src/runtime/reference/broadcast.cpp",
        "ngraph/core/reference/src/runtime/reference/concat.cpp",
        "ngraph/core/reference/src/runtime/reference/convert.cpp",
        "ngraph/core/reference/src/runtime/reference/einsum.cpp",
        "ngraph/core/reference/src/runtime/reference/eval_helpers.cpp",
        "ngraph/core/reference/src/runtime/reference/experimental_detectron_detection_output.cpp",
        "ngraph/core/reference/src/runtime/reference/fft.cpp",
        "ngraph/core/reference/src/runtime/reference/function.cpp",
        "ngraph/core/reference/src/runtime/reference/gather_tree.cpp",
        "ngraph/core/reference/src/runtime/reference/interpolate.cpp",
        "ngraph/core/reference/src/runtime/reference/jit_generator.cpp",
        "ngraph/core/reference/src/runtime/reference/loop.cpp",
        "ngraph/core/reference/src/runtime/reference/matmul.cpp",
        "ngraph/core/reference/src/runtime/reference/non_max_suppression.cpp",
        "ngraph/core/reference/src/runtime/reference/pad.cpp",
        "ngraph/core/reference/src/runtime/reference/reorg_yolo.cpp",
        "ngraph/core/reference/src/runtime/reference/reshape.cpp",
        "ngraph/core/reference/src/runtime/reference/reverse.cpp",
        "ngraph/core/reference/src/runtime/reference/slice.cpp",
        "ngraph/core/reference/src/runtime/reference/split.cpp",
        "ngraph/core/reference/src/runtime/reference/strided_slice.cpp",
        "ngraph/core/reference/src/runtime/reference/tensor_iterator.cpp",
        "ngraph/core/reference/src/runtime/reference/tile.cpp",
        "ngraph/core/reference/src/runtime/reference/transpose.cpp"
    ],

    local_include_dirs: [
        "ngraph/core/reference/include",
        "ngraph/core/include"
    ],

    header_libs: [
        "xbyak_headers"
    ],

    cflags: common_cflags + [
        "-DIE_BUILD_POSTFIX=\"\"",
        "-DIN_NGRAPH_LIBRARY",
        "-DPROJECT_ROOT_DIR=\"ngraph\"",
        "-DXBYAK64",
        "-DXBYAK_NO_OP_NAMES"
    ],

    shared_libs: [
        "liblog"
    ],

    rtti: true,

    strip: {
        none: true,
    }
}

//#################################################

cc_library_headers {
    name: "libMKLDNNPlugin_headers",
    vendor: true,
    export_include_dirs: [
        "inference-engine/src/plugin_api",
        "inference-engine/src/preprocessing",
        "inference-engine/include",
        "openvino/itt/include",
        "openvino/pp/include",
        "inference-engine/src/mkldnn_plugin/mkldnn",
        "inference-engine/src/mkldnn_plugin",
        "openvino/conditional_compilation/include",
        "inference-engine/src/transformations/include",
        "ngraph/core/include",
        "inference-engine/src/low_precision_transformations/include",
        "inference-engine/src/mkldnn_plugin/nodes"
    ],
}

//#################################################

cc_library_shared {

    name: "libMKLDNNPlugin",
    proprietary: true,
    owner: "intel",
    compile_multilib: "64",

    srcs: [
        "inference-engine/src/mkldnn_plugin/config.cpp",
        "inference-engine/src/mkldnn_plugin/emitters/jit_eltwise_emitters.cpp",
        "inference-engine/src/mkldnn_plugin/emitters/jit_emitter.cpp",
        "inference-engine/src/mkldnn_plugin/emitters/jit_load_store_emitters.cpp",
        "inference-engine/src/mkldnn_plugin/emitters/jit_mkldnn_emitters.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn/ie_mkldnn.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn/iml_type_mapper.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_async_infer_request.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_descriptor.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_edge.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_exec_network.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_extension_mngr.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_extension_utils.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_graph.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_graph_dumper.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_graph_optimizer.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_infer_request.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_memory.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_memory_solver.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_memory_state.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_node.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_plugin.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_primitive.cpp",
        "inference-engine/src/mkldnn_plugin/mkldnn_weights_cache.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/convert_broadcast_to_tiles.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/convert_matmul_to_fc_or_gemm.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/convert_tile_to_seq_tiles.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/convert_to_leaky_relu.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/convert_to_power_static.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/convert_to_swish_cpu.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/fc_bias_fusion.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/op/fully_connected.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/op/leaky_relu.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/op/power_static.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/op/swish_cpu.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/reshape_1d_ops.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/reshape_fc_fusion.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/reshape_fully_connected.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/reshape_prelu.cpp",
        "inference-engine/src/mkldnn_plugin/ngraph_transformations/rnn_sequences_optimization.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/bucketize.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/common/cpu_convert.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/common/permute_kernel.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/common/softmax.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/common/tensor_desc_creator.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/ctc_greedy_decoder.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/ctc_greedy_decoder_seq_len.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/ctc_loss.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/cum_sum.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/detectionoutput.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/detectionoutput_onnx.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/extract_image_patches.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/gather_tree.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/grn.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/list.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/log_softmax.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_batch_to_space_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_bin_conv_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_broadcast_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_concat_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_conv_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_convert_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_deconv_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_def_conv_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_depth_to_space_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_dft_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_eltwise_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_embedding_bag_offset_sum_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_embedding_bag_packed_sum_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_embedding_bag_sum_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_embedding_segments_sum_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_fake_quantize_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_fullyconnected_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_gather_elements_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_gather_nd_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_gather_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_generic_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_input_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_interpolate_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_lrn_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_math_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_matmul_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_memory_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_mvn_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_normalize_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_one_hot_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_pad_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_pooling_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_psroi_pooling_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_reduce_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_reference_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_region_yolo_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_reorder_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_reshape_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_rnn.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_roi_align_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_roi_pooling_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_roll_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_scatter_update_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_select_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_shuffle_channels_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_softmax_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_space_to_batch_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_space_to_depth_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_split_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_strided_slice_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_tensoriterator_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_tile_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/mkldnn_transpose_node.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/non_max_suppression.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/priorgridgenerator_onnx.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/proposal.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/proposal_onnx.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/range.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/reorg_yolo.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/reverse_sequence.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/roifeatureextractor_onnx.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/topk.cpp",
        "inference-engine/src/mkldnn_plugin/nodes/topkrois_onnx.cpp",
        "inference-engine/src/mkldnn_plugin/normalize_preprocess.cpp",
        "inference-engine/src/mkldnn_plugin/utils/blob_dump.cpp",
        "inference-engine/src/mkldnn_plugin/utils/node_dumper.cpp",
        "inference-engine/src/mkldnn_plugin/utils/rt_info/memory_formats_attribute.cpp",
        "inference-engine/src/mkldnn_plugin/cross-compiled/proposal_imp_disp.cpp"
    ],

    header_libs: [
        "libMKLDNNPlugin_headers",
        "libdnnl_headers",
        "libtbb_headers"
    ],

    cflags: common_cflags + [
        "-DENABLE_MKL_DNN=1",
        "-DIE_BUILD_POSTFIX=\"\"",
        "-DIE_THREAD=IE_THREAD_TBB",
        "-DIMPLEMENT_INFERENCE_ENGINE_PLUGIN",
        "-DMKLDNNPlugin_EXPORTS",
        "-DCI_BUILD_NUMBER=\"custom_releases/2021/4_b76c90374501ac461d89a8fba44335741d066ccc\"",
        "-DXARCH=ANY"
        
    ],

    shared_libs: [
        "liblog",
        "libtbb",
        "libtbbmalloc",
        "libinference_engine",
        "libinference_engine_lp_transformations",
        "libinference_engine_transformations",
        "libngraph"
    ],

    static_libs: [
        "libitt",
        "libdnnl"
    ],

    rtti: true,

    strip: {
        none: true,
    }
}

//#################################################

cc_library_headers {
    name: "libpugixml_headers",
    vendor: true,
    export_include_dirs: ["inference-engine/thirdparty/pugixml/src"],
}

//#################################################

cc_library_static {

    name: "libpugixml",
    proprietary: true,
    compile_multilib: "64",

    srcs: [
        "inference-engine/thirdparty/pugixml/src/pugixml.cpp"
    ],

    cflags: common_cflags + [
        "-DENABLE_MKL_DNN=1",
        "-DIE_BUILD_POSTFIX=\"\""
    ],

    rtti: true,

    strip: {
        none: true,
    }
}

//#################################################

cc_library_static {
    name: "libitt",
    proprietary: true,
    compile_multilib: "64",

    srcs: [
        "openvino/itt/src/itt.cpp",
    ],

    local_include_dirs: [
        "openvino/itt/include",
        "openvino/pp/include"
    ],

    cflags: common_cflags + [
        "-DIE_BUILD_POSTFIX=\"\""
    ],

    rtti: true,

    strip: {
        none: true,
    }
}
